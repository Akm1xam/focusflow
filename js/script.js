document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const timerText = document.querySelector('.timer-text');
    const timerModeText = document.querySelector('.timer-mode-text');
    const timerProgress = document.querySelector('.timer-progress');
    const timerBg = document.querySelector('.timer-bg');
    const startBtn = document.querySelector('.start');
    const pauseBtn = document.querySelector('.pause');
    const resetBtn = document.querySelector('.reset');
    const modeButtons = document.querySelectorAll('.timer-mode button');
    const workDurationInput = document.getElementById('work-duration');
    const shortBreakDurationInput = document.getElementById('short-break-duration');
    const longBreakDurationInput = document.getElementById('long-break-duration');
    const taskInput = document.getElementById('task-input');
    const addTaskBtn = document.getElementById('add-task');
    const taskList = document.getElementById('task-list');
    const tasksLeft = document.getElementById('tasks-left');
    const clearCompletedBtn = document.getElementById('clear-completed');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const rangeButtons = document.querySelectorAll('.range-btn');
    const notification = document.getElementById('notification');
    const notificationTitle = document.getElementById('notification-title');
    const notificationMessage = document.getElementById('notification-message');
    const notificationClose = document.getElementById('notification-close');
    const autoStartToggle = document.getElementById('auto-start');
    const darkThemeToggle = document.getElementById('dark-theme');
    const focusModeToggle = document.getElementById('focus-mode');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const todayPomodoros = document.getElementById('today-pomodoros');
    const weekPomodoros = document.getElementById('week-pomodoros');
    const totalPomodoros = document.getElementById('total-pomodoros');
    const completedTasks = document.getElementById('completed-tasks');
    const sessionCount = document.getElementById('session-count');
    const tasksCount = document.getElementById('tasks-count');
    const tasksTotal = document.getElementById('tasks-total');
    const countAll = document.getElementById('count-all');
    const countActive = document.getElementById('count-active');
    const countCompleted = document.getElementById('count-completed');
    const dailyTrend = document.getElementById('daily-trend');
    const weeklyTrend = document.getElementById('weekly-trend');
    const totalHours = document.getElementById('total-hours');
    const taskProgress = document.getElementById('task-progress');
    const completionRate = document.getElementById('completion-rate');
    const productivityInsight = document.getElementById('productivity-insight');

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let timer;
    let timeLeft;
    let isRunning = false;
    let currentMode = 'work';
    let workDuration = parseInt(workDurationInput.value) * 60;
    let shortBreakDuration = parseInt(shortBreakDurationInput.value) * 60;
    let longBreakDuration = parseInt(longBreakDurationInput.value) * 60;
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
    let pomodoros = JSON.parse(localStorage.getItem('pomodoros')) || [];
    let currentFilter = 'all';
    let currentRange = 'week';
    let circumference = 2 * Math.PI * 90;
    let autoStart = localStorage.getItem('autoStart') === 'true';
    let darkTheme = localStorage.getItem('darkTheme') === 'true';
    let focusMode = localStorage.getItem('focusMode') === 'true';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    timeLeft = workDuration;
    updateTimerDisplay();
    loadTasks();
    updateStats();
    renderStatsGraph();
    updateInsights();
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    autoStartToggle.checked = autoStart;
    darkThemeToggle.checked = darkTheme;
    focusModeToggle.checked = focusMode;
    updateTheme();
    updateFocusMode();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    timerProgress.style.strokeDasharray = circumference;
    timerBg.style.strokeDasharray = circumference;
    timerProgress.style.strokeDashoffset = 0;

    // –§—É–Ω–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerText.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        const totalTime = getTotalTime();
        const offset = circumference - (timeLeft / totalTime) * circumference;
        timerProgress.style.strokeDashoffset = offset;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∂–∏–º–∞
        const modeText = {
            'work': '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!',
            'short-break': '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤',
            'long-break': '–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤'
        };
        timerModeText.textContent = modeText[currentMode];
    }

    function getTotalTime() {
        switch(currentMode) {
            case 'work': return workDuration;
            case 'short-break': return shortBreakDuration;
            case 'long-break': return longBreakDuration;
            default: return workDuration;
        }
    }

    function startTimer() {
        if (!isRunning) {
            isRunning = true;
            timer = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    isRunning = false;
                    playNotificationSound();
                    
                    if (currentMode === 'work') {
                        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–∏–¥–æ—Ä–∫—É
                        addPomodoro();
                        updateStats();
                        renderStatsGraph();
                        updateInsights();
                        showNotification('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', '–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!');
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
                        if (autoStart) {
                            switchMode('short-break');
                            startTimer();
                        }
                    } else {
                        showNotification('–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω!', '–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!');
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
                        if (autoStart) {
                            switchMode('work');
                            startTimer();
                        }
                    }
                }
            }, 1000);
        }
    }

    function pauseTimer() {
        clearInterval(timer);
        isRunning = false;
        showNotification('–¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ', '–ù–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ä—Ç" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
    }

    function resetTimer() {
        clearInterval(timer);
        isRunning = false;
        timeLeft = getTotalTime();
        updateTimerDisplay();
    }

    function switchMode(mode) {
        currentMode = mode;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞
        modeButtons.forEach(btn => {
            if (btn.dataset.mode === mode) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        timeLeft = getTotalTime();
        updateTimerDisplay();
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        const colors = {
            'work': '#6366f1',
            'short-break': '#06b6d4',
            'long-break': '#f59e0b'
        };
        timerProgress.style.stroke = colors[mode];
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
    function addTask() {
        const text = taskInput.value.trim();
        if (text !== '') {
            const task = {
                id: Date.now(),
                text: text,
                completed: false,
                createdAt: new Date().toISOString(),
                pomodoros: 0
            };
            
            tasks.push(task);
            saveTasks();
            renderTask(task);
            taskInput.value = '';
            taskInput.focus();
            updateTaskStats();
        }
    }

    function renderTask(task) {
        if (!isTaskVisible(task)) return;
        
        const li = document.createElement('li');
        li.className = 'task-item' + (task.completed ? ' completed' : '');
        li.dataset.id = task.id;
        
        li.innerHTML = `
            <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''}>
            <span class="task-text">${task.text}</span>
            <span class="task-pomodoro-count">${task.pomodoros} üçÖ</span>
            <button class="task-delete"><i class="fas fa-trash"></i></button>
        `;
        
        taskList.appendChild(li);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        const checkbox = li.querySelector('.task-checkbox');
        const deleteBtn = li.querySelector('.task-delete');
        
        checkbox.addEventListener('change', () => toggleTask(task.id));
        deleteBtn.addEventListener('click', () => deleteTask(task.id));
    }

    function loadTasks() {
        taskList.innerHTML = '';
        tasks.forEach(task => renderTask(task));
        updateTaskStats();
    }

    function isTaskVisible(task) {
        if (currentFilter === 'all') return true;
        if (currentFilter === 'active') return !task.completed;
        if (currentFilter === 'completed') return task.completed;
        return true;
    }

    function toggleTask(id) {
        tasks = tasks.map(task => {
            if (task.id === id) {
                return { ...task, completed: !task.completed };
            }
            return task;
        });
        
        saveTasks();
        loadTasks();
        updateInsights();
    }

    function deleteTask(id) {
        tasks = tasks.filter(task => task.id !== id);
        saveTasks();
        loadTasks();
        updateInsights();
    }

    function clearCompletedTasks() {
        tasks = tasks.filter(task => !task.completed);
        saveTasks();
        loadTasks();
        updateInsights();
    }

    function updateTaskStats() {
        const total = tasks.length;
        const completed = tasks.filter(task => task.completed).length;
        const active = total - completed;
        
        tasksLeft.textContent = active;
        tasksCount.textContent = active;
        tasksTotal.textContent = total;
        countAll.textContent = total;
        countActive.textContent = active;
        countCompleted.textContent = completed;
        completedTasks.textContent = completed;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        const progress = total > 0 ? (completed / total) * 100 : 0;
        taskProgress.style.width = `${progress}%`;
        completionRate.textContent = `${Math.round(progress)}%`;
    }

    function saveTasks() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    function addPomodoro() {
        const now = new Date();
        const pomodoro = {
            date: now.toISOString(),
            timestamp: now.getTime(),
            mode: currentMode,
            duration: currentMode === 'work' ? workDuration : (currentMode === 'short-break' ? shortBreakDuration : longBreakDuration)
        };
        
        pomodoros.push(pomodoro);
        localStorage.setItem('pomodoros', JSON.stringify(pomodoros));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π —Å–µ–≥–æ–¥–Ω—è
        updateSessionCount();
    }

    function updateSessionCount() {
        const today = new Date();
        const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate()).getTime();
        const sessionsToday = pomodoros.filter(p => p.timestamp >= todayStart && p.mode === 'work').length;
        sessionCount.textContent = sessionsToday;
    }

    function updateStats() {
        const now = new Date();
        const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
        const weekStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7).getTime();
        const monthStart = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate()).getTime();
        
        const pomodorosToday = pomodoros.filter(p => p.timestamp >= todayStart && p.mode === 'work').length;
        const pomodorosThisWeek = pomodoros.filter(p => p.timestamp >= weekStart && p.mode === 'work').length;
        const pomodorosThisMonth = pomodoros.filter(p => p.timestamp >= monthStart && p.mode === 'work').length;
        const totalPomodoroCount = pomodoros.filter(p => p.mode === 'work').length;
        
        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö
        const totalMinutes = pomodoros.reduce((total, p) => total + (p.duration / 60), 0);
        const totalHoursValue = Math.round(totalMinutes / 60);
        
        todayPomodoros.textContent = pomodorosToday;
        weekPomodoros.textContent = pomodorosThisWeek;
        totalPomodoros.textContent = totalPomodoroCount;
        totalHours.textContent = `${totalHoursValue}—á`;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
        updateTrends();
        updateSessionCount();
        updateTaskStats();
    }

    function updateTrends() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        const randomTrend = Math.random() > 0.5 ? 'up' : 'down';
        const randomValue = Math.floor(Math.random() * 20) + 1;
        
        dailyTrend.className = `stat-trend ${randomTrend}`;
        dailyTrend.innerHTML = `<i class="fas fa-arrow-${randomTrend}"></i><span>${randomValue}%</span>`;
        
        weeklyTrend.className = `stat-trend ${randomTrend}`;
        weeklyTrend.innerHTML = `<i class="fas fa-arrow-${randomTrend}"></i><span>${randomValue}%</span>`;
    }

    function renderStatsGraph() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å Chart.js
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
        console.log('Graphs would be rendered here with Chart.js');
    }

    function updateInsights() {
        const completedCount = tasks.filter(t => t.completed).length;
        const totalCount = tasks.length;
        const completionRate = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;
        
        let insight = '';
        
        if (pomodoros.length === 0) {
            insight = '–ù–∞—á–Ω–∏—Ç–µ –≤–∞—à—É –ø–µ—Ä–≤—É—é Pomodoro —Å–µ—Å—Å–∏—é! –°—Ç–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ.';
        } else if (completionRate < 30) {
            insight = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–µ–Ω—å—à–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏. –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.';
        } else if (completionRate < 70) {
            insight = '–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.';
        } else {
            insight = '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –í—ã –∑–∞–≤–µ—Ä—à–∞–µ—Ç–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–¥–∞—á. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!';
        }
        
        productivityInsight.textContent = insight;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showNotification(title, message) {
        notificationTitle.textContent = title;
        notificationMessage.textContent = message;
        notification.classList.add('show');
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 5000);
    }

    function playNotificationSound() {
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.type = 'sine';
            oscillator.frequency.value = 800;
            gainNode.gain.value = 0.2;
            
            oscillator.start();
            
            setTimeout(() => {
                oscillator.stop();
            }, 300);
        } catch (e) {
            console.log('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        }
    }

    // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –∏ —Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏
    function updateTheme() {
        if (darkTheme) {
            document.documentElement.setAttribute('data-theme', 'dark');
        } else {
            document.documentElement.removeAttribute('data-theme');
        }
        localStorage.setItem('darkTheme', darkTheme);
    }

    function updateFocusMode() {
        if (focusMode) {
            document.body.classList.add('focus-mode');
            showNotification('–†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞', '–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞—Ç–µ–º–Ω–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏');
        } else {
            document.body.classList.remove('focus-mode');
        }
        localStorage.setItem('focusMode', focusMode);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    startBtn.addEventListener('click', startTimer);
    pauseBtn.addEventListener('click', pauseTimer);
    resetBtn.addEventListener('click', resetTimer);
    
    modeButtons.forEach(button => {
        button.addEventListener('click', () => {
            if (!isRunning) {
                switchMode(button.dataset.mode);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ +/- –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–∞–π–º–µ—Ä–∞
    document.querySelectorAll('.btn-increment').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const input = e.target.parentElement.querySelector('input');
            input.value = Math.min(parseInt(input.max), parseInt(input.value) + 1);
            updateDuration(input);
        });
    });
    
    document.querySelectorAll('.btn-decrement').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const input = e.target.parentElement.querySelector('input');
            input.value = Math.max(parseInt(input.min), parseInt(input.value) - 1);
            updateDuration(input);
        });
    });
    
    function updateDuration(input) {
        const value = parseInt(input.value) * 60;
        switch(input.id) {
            case 'work-duration': 
                workDuration = value;
                if (currentMode === 'work' && !isRunning) timeLeft = value;
                break;
            case 'short-break-duration': 
                shortBreakDuration = value;
                if (currentMode === 'short-break' && !isRunning) timeLeft = value;
                break;
            case 'long-break-duration': 
                longBreakDuration = value;
                if (currentMode === 'long-break' && !isRunning) timeLeft = value;
                break;
        }
        updateTimerDisplay();
    }
    
    workDurationInput.addEventListener('change', () => updateDuration(workDurationInput));
    shortBreakDurationInput.addEventListener('change', () => updateDuration(shortBreakDurationInput));
    longBreakDurationInput.addEventListener('change', () => updateDuration(longBreakDurationInput));
    
    addTaskBtn.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTask();
        }
    });
    
    clearCompletedBtn.addEventListener('click', clearCompletedTasks);
    
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            currentFilter = button.dataset.filter;
            loadTasks();
        });
    });
    
    rangeButtons.forEach(button => {
        button.addEventListener('click', () => {
            rangeButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            currentRange = button.dataset.range;
            renderStatsGraph();
        });
    });
    
    autoStartToggle.addEventListener('change', () => {
        autoStart = autoStartToggle.checked;
        localStorage.setItem('autoStart', autoStart);
    });
    
    darkThemeToggle.addEventListener('change', () => {
        darkTheme = darkThemeToggle.checked;
        updateTheme();
    });
    
    focusModeToggle.addEventListener('change', () => {
        focusMode = focusModeToggle.checked;
        updateFocusMode();
    });
    
    notificationClose.addEventListener('click', () => {
        notification.classList.remove('show');
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    function initCharts() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å Chart.js
        console.log('Charts initialized');
    }

    initCharts();
});